{
  "name": "Json-schema-deref",
  "tagline": "json schema dereference utility",
  "body": "# json-schema-deref\r\n\r\nDereference JSON pointers in a JSON schemas with their true resolved values.\r\nA lighter synchronous version of this module is available as [json-schema-deref-sync](https://github.com/bojand/json-schema-deref-sync),\r\nbut omits web references and custom loaders.\r\n\r\n## Installation\r\n\r\n`npm install json-schema-deref`\r\n\r\n## Overview\r\n\r\nLet's say you have the following JSON Schema:\r\n\r\n```json\r\n{\r\n  \"description\": \"Just some JSON schema.\",\r\n  \"title\": \"Basic Widget\",\r\n  \"type\": \"object\",\r\n  \"definitions\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    }\r\n  },\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"$ref\": \"#/definitions/id\"\r\n    },\r\n    \"foo\": {\r\n      \"$ref\": \"http://www.mysite.com/myschema.json#/definitions/foo\"\r\n    },\r\n    \"bar\": {\r\n      \"$ref\": \"bar.json\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSometimes you just want that schema to be fully expanded, with `$ref`'s being their (true) resolved values:\r\n\r\n```json\r\n{\r\n  \"description\": \"Just some JSON schema.\",\r\n  \"title\": \"Basic Widget\",\r\n  \"type\": \"object\",\r\n  \"definitions\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    }\r\n  },\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    },\r\n    \"foo\": {\r\n      \"description\": \"foo property\",\r\n      \"readOnly\": true,\r\n      \"type\": \"number\"\r\n    },\r\n    \"bar\": {\r\n      \"description\": \"bar property\",\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis utility lets you do that:\r\n\r\n\r\n```js\r\nvar deref = require('json-schema-deref');\r\nvar myschema = require('schema.json');\r\n\r\nderef(myschema, function(err, fullSchema) {\r\n  console.dir(fullSchema); // has the full expanded $refs\r\n});\r\n```\r\n\r\n## API Reference\r\n\r\n### deref(schema, options, fn)\r\n\r\nDerefs <code>$ref</code>'s in JSON Schema to actual resolved values. Supports local, file and web refs.\r\n\r\n**Kind**: global function  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| schema | <code>Object</code> | The JSON schema |\r\n| options | <code>Object</code> | options |\r\n| options.baseFolder | <code>String</code> | the base folder to get relative path files from. Default is <code>process.cwd()</code> |\r\n| options.cache | <code>String</code> | whether to cache the result from the request. Default: <code>true</code>. |\r\n| options.cacheTTL | <code>Number</code> | the time to keep request result in cache. Default is <code>5 minutes</code>. |\r\n| options.failOnMissing | <code>Boolean</code> | By default missing / unresolved refs will be left as is with their ref value intact.                                        If set to <code>true</code> we will error out on first missing ref that we cannot                                        resolve. Default: <code>false</code>. |\r\n| options.loader | <code>function</code> | a function for custom loader. Invoked if we could not resolve the ref type,                                  or if there was an error resolving a web or file ref types.                                  function with signature: <code>function(refValue, options, fn)</code>                                  <code>refValue</code> - the string value of the ref being resolved. Ex: <code>db://my_database_id</code>                                  <code>options</code> - options parameter passed to <code>deref</code>                                  <code>fn</code> - the final callback function, in form <code>function(err, newValue)</code>                                  <code>err</code> - error if ref is valid for the loader but there was an error resolving the ref.                                  If used in combination with <code>failOnMissing</code> option it will abort the whole deref process.                                  <code>newValue</code> - the resolved ref value, or <code>null</code> or <code>undefined</code> if the ref isn't for this custom                                  <code>loader</code> and we should just leave the <code>$ref</code> as is. |\r\n| fn | <code>function</code> | The final callback in form <code>(error, newSchema)</code> |\r\n\r\n## Custom Loader\r\n\r\nLet's say we want to get $ref's from a MongoDB database, and our `$ref` objects in the JSON Schema might be something like:\r\n\r\n```json\r\n\"foo\": {\r\n  \"$ref\":\"mongodb:507c35dd8fada716c89d0013\"\r\n}\r\n```\r\n\r\nOur custom loader function passed in the `options` `loader` parameter would look something like:\r\n\r\n```js\r\nfunction myMongoDBLoader(ref, option, fn) {\r\n  if(ref.indexOf('mongodb:') === 0) {\r\n    var id = ref.substring(8);\r\n    return collection.findOne({_id:id}, fn);\r\n  }\r\n\r\n  // not ours, pass back nothing to keep it the same\r\n  // or pass error and use failOnMissing to abort\r\n  return fn();\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}